//=========================================
// 
// ゲーム内処理
// Author YudaKaito
// 
//=========================================
//------------------------------------
// include
//------------------------------------
#include "game.h"
#include "main.h"
#include "input.h"
#include "polygon.h"
#include "player.h"
#include "camera.h"
#include "light.h"
#include "model.h"
#include "shadow.h"
#include "wall.h"
#include "billboard.h"
#include "mesh_field.h"
#include "mesh_cylinder.h"
#include "mesh_sphere.h"
#include "mesh_sky.h"
#include "line.h"
#include "pause.h"
#include "timer.h"
#include "fade.h"
#include "debug.h"
#include "game_ui.h"
#include "particle.h"
#include "sound.h"

//------------------------------------
// マクロ定義
//------------------------------------
#define MESH_FIELD	"data/TEXTURE/kusa.jpg"

//------------------------------------
// スタティック変数
//------------------------------------
static bool s_bPause;				// ポーズ中かどうか
static bool s_bDebug;				// デバッグモードかどうか
static bool s_bCountDownTime;		// カウントダウン中か否か 
static int nDelayCnt;				// 遅延時のカウント
static bool s_bGame;					// ゲーム中かゲームが始まる前か

//=========================================
// 初期化
//=========================================
void InitGame(void)
{
	s_bPause = false;
	s_bDebug = false;
	s_bCountDownTime = false;
	s_bGame = false;
#ifdef _DEBUG
	// ラインの初期化処理
	InitLine();
#endif // !_DEBUG

	// 初期化
	InitTimer();		// タイム
	InitPause();		// ポーズ
	InitPolygon();		// ポリゴン
	InitCamera();		// カメラ
	InitLight();		// ライト
	InitModel();		// モデル
	InitPlayer();		// プレイヤー
	InitShadow();		// 影
	InitMeshField();	// メッシュ
	InitGameUI();		// UI
	InitMeshSky();		// メッシュスカイ
	InitParticle();		// パーティクル

	// メッシュスカイの設定処理
	SetMeshSky();

	// タイムの設定処理
	StartTimer(3, 0, 40.0f, 80.0f, D3DXVECTOR3(SCREEN_WIDTH / 2.0f, SCREEN_HEIGHT / 2.0f, 0.0f), 0);
	CountRestartStop(true, 0);

	// ポリゴンの設定処理
	SetPolygon(&D3DXVECTOR3(0.0f, -200.0f, 0.0f), &D3DXVECTOR3(D3DX_PI * -0.5f, 0.0f, 0.0f), &D3DXVECTOR3(100.0f, 0.0f, 100.0f),&D3DXCOLOR(1.0f,1.0f,1.0f,1.0f), NULL, "floar");
	SetPolygonUI(&D3DXVECTOR3(-25.5f, -10.5f, 30.0f), &D3DXVECTOR3(D3DX_PI * -0.5f, 0.0f, 0.0f), D3DXVECTOR3(5.0f, 0.0f, 5.0f), "data/TEXTURE/Circle.png");

	// メッシュフィールドの設定処理
	SetMesh setMesh;
	setMesh.file = MESH_FIELD;
	setMesh.fLineHeight = 50.0f;
	setMesh.fLineWidth = 50.0f;
	setMesh.nSurfaceHeight = 75;
	setMesh.nSurfaceWidth = 75;
	setMesh.pos = ZERO_VECTOR;
	setMesh.rot = ZERO_VECTOR;
	SetMeshField(&setMesh);

	PlaySound(SOUND_LABEL_BGM_GAME);
}

//=========================================
// 終了
//=========================================
void UninitGame(void)
{
	StopSound();
	// 終了
	UninitTimer();			// タイム
	UninitPause();			// ポーズ
	UninitPolygon();		// ポリゴン
	UninitCamera();			// カメラ
	UninitLight();			// ライト
	UninitShadow();			// 影
	UninitMeshField();		// メッシュ
	UninitMeshSky();		// メッシュ
	UninitGameUI();			// UI
	UninitParticle();		// パーティクル

#ifdef _DEBUG
	// ライン
	UninitLine();
	
#endif // !_DEBUG

	// タイマーの破棄
	BreakTimer(1);
}

//=========================================
// 更新
//=========================================
void UpdateGame(void)
{
	// ポーズの機能
	if (GetJoypadTrigger(JOYKEY_START) || GetKeyboardTrigger(DIK_P))
	{
		s_bPause = !s_bPause;
	}

	// ポーズ中ならポーズ以外を更新しない
	if (s_bPause)
	{
		UpdatePause();		// ポーズ
		return;
	}

	UpdateTimer();			// タイム

	UpdateGameCamera();		// カメラ

	// カウントダウン判定
	if (!TimerUp(0) && GetTimer(0)->bUse)
	{
		return;
	}

	// ゲームスタート時の遅延
	if (nDelayCnt < 30)
	{
		nDelayCnt++;
		return;
	}

	if (!s_bGame)
	{
		StartTimer(90, 1, 25.0f, 50.0f, D3DXVECTOR3(SCREEN_WIDTH / 2.0f+25.0f, 40.0f, 0.0f), 0);
		// タイマーの破棄
		BreakTimer(0);
		s_bCountDownTime = true;
		s_bGame = true;
	}

	// 更新
	UpdateModel();			// モデル
	UpdatePlayer();			// プレイヤー
	UpdateLight();			// ライト
	UpdatePolygon();		// ポリゴン
	UpdateShadow();			// 影
	UpdateMeshField();		// メッシュ
	UpdateMeshSky();		// メッシュスカイ
	UpdateGameUI();			// UI
	UpdateParticle();		// パーティクル

	// 時間が切れたらリザルトに以降
	if (TimerUp(1))
	{
		SetFade(MODE_RESULT);
	}

#ifdef _DEBUG
	UpdateLine();	// ライン

	// リザルト画面に移動
	if (GetJoypadTrigger(JOYKEY_X))
	{
		SetFade(MODE_RESULT);
	}
#endif // !_DEBUG
}

//=========================================
// 描画
//=========================================
void DrawGame(int cameraData)
{
	LPDIRECT3DDEVICE9 pDevice = GetDevice();	//デバイスの取得
												
	switch (cameraData)
	{
	case 0:
		// ビューボードのクリア
		pDevice->SetViewport(&GetCamera(cameraData)->viewport);

		// 画面クリア(バックバッファ＆Zバッファのクリア)
		pDevice->Clear(0, NULL,
			(D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER),
			D3DCOLOR_RGBA(0, 0, 0, 0), 1.0f, 0);

		SetCamera(cameraData);			// カメラ

		DrawModel();		// モデル
		DrawPlayer();		// プレイヤー
		DrawMeshField();	// メッシュ
		DrawMeshSky();		// メッシュスカイ
		DrawShadow();		// 影

		if (s_bGame)
		{
			DrawModelUI();		// モデルUI
			DrawParticle();		// パーティクル
			DrawGameUI();		// UI
			DrawPolygonUI();	// ポリゴンUI
		}

		DrawTimer();		// タイム

		if (s_bPause)
		{
			DrawPause();
		}

#ifdef _DEBUG
		DrawLine();		// ライン
		DrawFPS();		// FPSの表示
#endif // !_DEBUG
		break;
	//case 1:
	//	DrawPolygon();
	//	break;
	default:
		break;
	}
}

//=========================================
// ポーズの設定処理
//=========================================
void SetEnablePause(bool bUse)
{
	s_bPause = bUse;
}

//=========================================
// ポーズの状態を取得
//=========================================
bool GetPause(void)
{
	return s_bPause;
}
